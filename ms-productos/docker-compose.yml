# Crear red
# docker network create backend-net

# Armar todo y correr
# docker-compose -f ./ms-productos/docker-compose.yml up --build -d

version: '3.8'

services:

  pg-dan:
    image: postgres
    container_name: pg-dan-db
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: pguser
      POSTGRES_PASSWORD: pgpassword
      POSTGRES_DB: pg-dan      
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - productos-net

  # Acceder desde el navegador: http://localhost:8032/ colocando las credenciales de pgadmin.
  # Luego registrar el servidor, poniendo como host "pg-dan" (NO "localhost") y el resto 
  # de credenciales de la db 
  pgadmin-dan:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-container
    environment:
      PGADMIN_DEFAULT_EMAIL: mdomingu@gmail.comp
      PGADMIN_DEFAULT_PASSWORD: pgdan
    ports:
      - "8032:80"
    depends_on:
      - pg-dan
    networks:
      - productos-net

  ms-productos-svc:
    image: ms-productos-svc:latest
    container_name: ms-productos-svc
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-dan-db:5432/pg-dan
      SPRING_DATASOURCE_USERNAME: pguser
      SPRING_DATASOURCE_PASSWORD: pgpassword
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      #Eureka
      SPRING_EUREKA_DEFAULT_ZONE: http://ms-eureka-svc:8761/eureka/
      SPRING_INSTANCIA: ms-productos-svc
    ports:
      - "6180:8080"
    depends_on:
      - pg-dan
    networks:
      - productos-net
      - backend-net
networks:
  backend-net:
    external: true
  productos-net:
    driver: bridge

volumes:
  pg-data:
